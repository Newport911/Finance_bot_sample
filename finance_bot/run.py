"""
Finance Tracker Bot - Telegram –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤.

–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é FastAPI –∏ Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Pyrogram.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É API –∏ –±–æ—Ç–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö.

Attributes:
    app (FastAPI): –≠–∫–∑–µ–º–ø–ª—è—Ä FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    user_states (Dict[int, Dict[str, Any]]): –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
"""


import asyncio
from fastapi import FastAPI
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from finance_bot.app.config import settings
import uvicorn
from finance_bot.app.api.endpoints.transactions import router as transactions_router
import threading
from finance_bot.app.database import SessionLocal
from finance_bot.app.models.transaction import Category, Transaction

app = FastAPI()
app.include_router(transactions_router, prefix="/api/v1")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


class Bot(Client):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ Pyrogram Client.

    –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–æ—Ç–∞ –∏
    –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.

    Methods:
        start(): –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
        idle(): –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    """

    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API_ID, API_HASH –∏ BOT_TOKEN –∏–∑ settings.
        """
        super().__init__(
            "finance_bot",
            api_id=settings.API_ID,
            api_hash=settings.API_HASH,
            bot_token=settings.BOT_TOKEN
        )

    async def start(self):
        await super().start()
        print("Bot started!")

    async def idle(self):
        while True:
            try:
                while True:
                    await asyncio.sleep(1)
            except asyncio.CancelledError:
                print("Idle task cancelled.")


bot = Bot()


def get_main_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥.

    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")],
        [KeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"), KeyboardButton("üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")]
    ], resize_keyboard=True)


@bot.on_message(filters.command("start"))
async def start_command(client, message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    await message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.",
        reply_markup=get_main_keyboard()
    )


@bot.on_message(filters.command("help"))
async def help_command(client, message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    """
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /add_expense [—Å—É–º–º–∞] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [–æ–ø–∏—Å–∞–Ω–∏–µ] - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
    /add_income [—Å—É–º–º–∞] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [–æ–ø–∏—Å–∞–Ω–∏–µ] - –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥
    /statistics - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    /categories - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /add_expense [—Å—É–º–º–∞] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [–æ–ø–∏—Å–∞–Ω–∏–µ] - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
    /add_income [—Å—É–º–º–∞] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [–æ–ø–∏—Å–∞–Ω–∏–µ] - –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥
    /statistics - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    /categories - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    await message.reply_text(help_text, reply_markup=get_main_keyboard())


@bot.on_message(filters.regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$") | filters.command("statistics"))
async def statistics(client, message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í—ã—á–∏—Å–ª—è–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç:
    - –û–±—â—É—é —Å—É–º–º—É –¥–æ—Ö–æ–¥–æ–≤
    - –û–±—â—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤
    - –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    """
    db = SessionLocal()
    try:
        expenses = db.query(Transaction).join(Category).filter(
            Category.type == "expense",
            Transaction.user_id == message.from_user.id
        ).all()

        incomes = db.query(Transaction).join(Category).filter(
            Category.type == "income",
            Transaction.user_id == message.from_user.id
        ).all()

        total_expense = sum(t.amount for t in expenses)
        total_income = sum(t.amount for t in incomes)
        balance = total_income - total_expense

        stats_text = f"""
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
–í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤: {total_income} —Ä—É–±.
–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expense} —Ä—É–±.
–ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.
"""
        await message.reply_text(stats_text, reply_markup=get_main_keyboard())
    except Exception as e:
        await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    finally:
        db.close()


@bot.on_message(filters.regex("^üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏$") | filters.command("categories"))
async def categories_command(client, message):
    db = SessionLocal()
    categories = db.query(Category).all()
    categories_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n–†–∞—Å—Ö–æ–¥—ã:\n"
    categories_text += "\n".join([f"- {cat.name}" for cat in categories if cat.type == "expense"])
    categories_text += "\n\n–î–æ—Ö–æ–¥—ã:\n"
    categories_text += "\n".join([f"- {cat.name}" for cat in categories if cat.type == "income"])
    await message.reply_text(categories_text, reply_markup=get_main_keyboard())
    db.close()


def get_categories_keyboard(type_="expense"):
    """
        –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.

        Args:
            type_ (str): –¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π ("expense" –∏–ª–∏ "income")

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """
    db = SessionLocal()
    categories = db.query(Category).filter(Category.type == type_).all()
    db.close()

    buttons = []
    for cat in categories:
        buttons.append([InlineKeyboardButton(cat.name, callback_data=f"cat_{type_}_{cat.id}")])
    return InlineKeyboardMarkup(buttons)


@bot.on_message(filters.regex("^üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥$"))
async def add_expense_start(client, message):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.
    """
    await message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
        reply_markup=get_categories_keyboard("expense")
    )


@bot.on_message(filters.regex("^üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥$"))
async def add_income_start(client, message):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–æ—Ö–æ–¥–æ–≤.
    """
    await message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:",
        reply_markup=get_categories_keyboard("income")
    )


@bot.on_callback_query()
async def handle_callback(client, callback_query):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.

    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è.
    """
    data = callback_query.data
    if data.startswith("cat_"):
        _, type_, category_id = data.split("_")
        user_states[callback_query.from_user.id] = {
            'category_id': int(category_id),
            'type': type_
        }
        await callback_query.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–ù–∞–ø—Ä–∏–º–µ—Ä: 1000 –û–ø–∏—Å–∞–Ω–∏–µ",
            reply_markup=get_main_keyboard()
        )


@bot.on_message(filters.text & filters.regex("^(?!üìä|üìã|üí∞|üí∏|/).+"))
async def handle_transaction_input(client, message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.

    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ:
    - –í—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–∞–Ω–µ–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    - –í–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã
    - –í–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
    """
    user_id = message.from_user.id

    if user_id not in user_states:
        return

    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 1:
            await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ")
            return

        amount = float(parts[0])
        description = parts[1] if len(parts) > 1 else ""

        state = user_states[user_id]
        db = SessionLocal()

        transaction = Transaction(
            amount=amount,
            category_id=state['category_id'],
            description=description,
            user_id=user_id
        )

        db.add(transaction)
        db.commit()

        category = db.query(Category).filter(Category.id == state['category_id']).first()

        transaction_type = "–î–æ—Ö–æ–¥" if state['type'] == "income" else "–†–∞—Å—Ö–æ–¥"
        await message.reply_text(
            f"{transaction_type} –¥–æ–±–∞–≤–ª–µ–Ω:\n"
            f"–°—É–º–º–∞: {amount} —Ä—É–±.\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}",
            reply_markup=get_main_keyboard()
        )

        del user_states[user_id]

    except ValueError:
        await message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.close()


def run_api():
    uvicorn.run(app, host="0.0.0.0", port=8000)


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    –ó–∞–ø—É—Å–∫–∞–µ—Ç:
    - FastAPI —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    - Telegram –±–æ—Ç–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    """
    api_thread = threading.Thread(target=run_api, daemon=True)
    api_thread.start()

    try:
        await bot.start()
        print("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω...")
        await bot.idle()
    except KeyboardInterrupt:
        print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    finally:
        await bot.stop()


if __name__ == "__main__":
    try:
        bot.run(main())
    except KeyboardInterrupt:
        print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    finally:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")